// Code generated by dagger-compiler.  Do not edit.
package com.masterlock.api.module;

import dagger.internal.Binding;
import dagger.internal.BindingsGroup;
import dagger.internal.Linker;
import dagger.internal.ModuleAdapter;
import dagger.internal.ProvidesBinding;
import java.util.Set;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class ApiModule$$ModuleAdapter extends ModuleAdapter<ApiModule> {
  private static final String[] INJECTS = { };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public ApiModule$$ModuleAdapter() {
    super(com.masterlock.api.module.ApiModule.class, INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, false /*complete*/, true /*library*/);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(BindingsGroup bindings, ApiModule module) {
    bindings.contributeProvidesBinding("com.google.gson.Gson", new ProvidesGsonProvidesAdapter(module));
    bindings.contributeProvidesBinding("retrofit.RequestInterceptor", new ProvidesRequestInterceptorProvidesAdapter(module));
    bindings.contributeProvidesBinding("retrofit.RestAdapter", new ProvidesAdapterProvidesAdapter(module));
    bindings.contributeProvidesBinding("com.masterlock.api.client.AccountClient", new ProvideAccountClientProvidesAdapter(module));
    bindings.contributeProvidesBinding("com.masterlock.api.client.ProductClient", new ProvideProductClientProvidesAdapter(module));
    bindings.contributeProvidesBinding("com.masterlock.api.client.TermsOfServiceClient", new ProvideTermsOfServiceClientProvidesAdapter(module));
    bindings.contributeProvidesBinding("com.masterlock.api.client.KMSDeviceClient", new ProvideKMSDeviceClientProvidesAdapter(module));
    bindings.contributeProvidesBinding("com.masterlock.api.client.KMSDeviceLogClient", new ProvideKMSDeviceLogClientProvidesAdapter(module));
    bindings.contributeProvidesBinding("com.masterlock.api.client.GuestClient", new ProvidesGuestClientProvidesAdapter(module));
    bindings.contributeProvidesBinding("com.masterlock.api.client.ProductInvitationClient", new ProvidesProductInvitationClientProvidesAdapter(module));
    bindings.contributeProvidesBinding("com.masterlock.api.util.ApiErrorHandler", new ProvidesApiErrorHandlerProvidesAdapter(module));
    bindings.contributeProvidesBinding("com.masterlock.api.client.TimezoneClient", new ProvideTimezoneClientProvidesAdapter(module));
  }

  /**
   * A {@code Binding<com.google.gson.Gson>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<com.google.gson.Gson>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvidesGsonProvidesAdapter extends ProvidesBinding<com.google.gson.Gson>
      implements Provider<com.google.gson.Gson> {
    private final ApiModule module;

    public ProvidesGsonProvidesAdapter(ApiModule module) {
      super("com.google.gson.Gson", IS_SINGLETON, "com.masterlock.api.module.ApiModule", "providesGson");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.google.gson.Gson>}.
     */
    @Override
    public com.google.gson.Gson get() {
      return module.providesGson();
    }
  }

  /**
   * A {@code Binding<retrofit.RequestInterceptor>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<retrofit.RequestInterceptor>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvidesRequestInterceptorProvidesAdapter extends ProvidesBinding<retrofit.RequestInterceptor>
      implements Provider<retrofit.RequestInterceptor> {
    private final ApiModule module;

    public ProvidesRequestInterceptorProvidesAdapter(ApiModule module) {
      super("retrofit.RequestInterceptor", IS_SINGLETON, "com.masterlock.api.module.ApiModule", "providesRequestInterceptor");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<retrofit.RequestInterceptor>}.
     */
    @Override
    public retrofit.RequestInterceptor get() {
      return module.providesRequestInterceptor();
    }
  }

  /**
   * A {@code Binding<retrofit.RestAdapter>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code retrofit.RestAdapter} and its
   * dependencies.
   *
   * Being a {@code Provider<retrofit.RestAdapter>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvidesAdapterProvidesAdapter extends ProvidesBinding<retrofit.RestAdapter>
      implements Provider<retrofit.RestAdapter> {
    private final ApiModule module;
    private Binding<com.google.gson.Gson> gson;
    private Binding<retrofit.RequestInterceptor> requestInterceptor;
    private Binding<com.masterlock.api.util.ApiErrorHandler> apiErrorHandler;

    public ProvidesAdapterProvidesAdapter(ApiModule module) {
      super("retrofit.RestAdapter", IS_SINGLETON, "com.masterlock.api.module.ApiModule", "providesAdapter");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      gson = (Binding<com.google.gson.Gson>) linker.requestBinding("com.google.gson.Gson", ApiModule.class, getClass().getClassLoader());
      requestInterceptor = (Binding<retrofit.RequestInterceptor>) linker.requestBinding("retrofit.RequestInterceptor", ApiModule.class, getClass().getClassLoader());
      apiErrorHandler = (Binding<com.masterlock.api.util.ApiErrorHandler>) linker.requestBinding("com.masterlock.api.util.ApiErrorHandler", ApiModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(gson);
      getBindings.add(requestInterceptor);
      getBindings.add(apiErrorHandler);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<retrofit.RestAdapter>}.
     */
    @Override
    public retrofit.RestAdapter get() {
      return module.providesAdapter(gson.get(), requestInterceptor.get(), apiErrorHandler.get());
    }
  }

  /**
   * A {@code Binding<com.masterlock.api.client.AccountClient>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code com.masterlock.api.client.AccountClient} and its
   * dependencies.
   *
   * Being a {@code Provider<com.masterlock.api.client.AccountClient>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideAccountClientProvidesAdapter extends ProvidesBinding<com.masterlock.api.client.AccountClient>
      implements Provider<com.masterlock.api.client.AccountClient> {
    private final ApiModule module;
    private Binding<retrofit.RestAdapter> restAdapter;

    public ProvideAccountClientProvidesAdapter(ApiModule module) {
      super("com.masterlock.api.client.AccountClient", IS_SINGLETON, "com.masterlock.api.module.ApiModule", "provideAccountClient");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      restAdapter = (Binding<retrofit.RestAdapter>) linker.requestBinding("retrofit.RestAdapter", ApiModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(restAdapter);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.masterlock.api.client.AccountClient>}.
     */
    @Override
    public com.masterlock.api.client.AccountClient get() {
      return module.provideAccountClient(restAdapter.get());
    }
  }

  /**
   * A {@code Binding<com.masterlock.api.client.ProductClient>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code com.masterlock.api.client.ProductClient} and its
   * dependencies.
   *
   * Being a {@code Provider<com.masterlock.api.client.ProductClient>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideProductClientProvidesAdapter extends ProvidesBinding<com.masterlock.api.client.ProductClient>
      implements Provider<com.masterlock.api.client.ProductClient> {
    private final ApiModule module;
    private Binding<retrofit.RestAdapter> restAdapter;

    public ProvideProductClientProvidesAdapter(ApiModule module) {
      super("com.masterlock.api.client.ProductClient", IS_SINGLETON, "com.masterlock.api.module.ApiModule", "provideProductClient");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      restAdapter = (Binding<retrofit.RestAdapter>) linker.requestBinding("retrofit.RestAdapter", ApiModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(restAdapter);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.masterlock.api.client.ProductClient>}.
     */
    @Override
    public com.masterlock.api.client.ProductClient get() {
      return module.provideProductClient(restAdapter.get());
    }
  }

  /**
   * A {@code Binding<com.masterlock.api.client.TermsOfServiceClient>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code com.masterlock.api.client.TermsOfServiceClient} and its
   * dependencies.
   *
   * Being a {@code Provider<com.masterlock.api.client.TermsOfServiceClient>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideTermsOfServiceClientProvidesAdapter extends ProvidesBinding<com.masterlock.api.client.TermsOfServiceClient>
      implements Provider<com.masterlock.api.client.TermsOfServiceClient> {
    private final ApiModule module;
    private Binding<retrofit.RestAdapter> restAdapter;

    public ProvideTermsOfServiceClientProvidesAdapter(ApiModule module) {
      super("com.masterlock.api.client.TermsOfServiceClient", IS_SINGLETON, "com.masterlock.api.module.ApiModule", "provideTermsOfServiceClient");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      restAdapter = (Binding<retrofit.RestAdapter>) linker.requestBinding("retrofit.RestAdapter", ApiModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(restAdapter);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.masterlock.api.client.TermsOfServiceClient>}.
     */
    @Override
    public com.masterlock.api.client.TermsOfServiceClient get() {
      return module.provideTermsOfServiceClient(restAdapter.get());
    }
  }

  /**
   * A {@code Binding<com.masterlock.api.client.KMSDeviceClient>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code com.masterlock.api.client.KMSDeviceClient} and its
   * dependencies.
   *
   * Being a {@code Provider<com.masterlock.api.client.KMSDeviceClient>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideKMSDeviceClientProvidesAdapter extends ProvidesBinding<com.masterlock.api.client.KMSDeviceClient>
      implements Provider<com.masterlock.api.client.KMSDeviceClient> {
    private final ApiModule module;
    private Binding<retrofit.RestAdapter> restAdapter;

    public ProvideKMSDeviceClientProvidesAdapter(ApiModule module) {
      super("com.masterlock.api.client.KMSDeviceClient", IS_SINGLETON, "com.masterlock.api.module.ApiModule", "provideKMSDeviceClient");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      restAdapter = (Binding<retrofit.RestAdapter>) linker.requestBinding("retrofit.RestAdapter", ApiModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(restAdapter);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.masterlock.api.client.KMSDeviceClient>}.
     */
    @Override
    public com.masterlock.api.client.KMSDeviceClient get() {
      return module.provideKMSDeviceClient(restAdapter.get());
    }
  }

  /**
   * A {@code Binding<com.masterlock.api.client.KMSDeviceLogClient>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code com.masterlock.api.client.KMSDeviceLogClient} and its
   * dependencies.
   *
   * Being a {@code Provider<com.masterlock.api.client.KMSDeviceLogClient>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideKMSDeviceLogClientProvidesAdapter extends ProvidesBinding<com.masterlock.api.client.KMSDeviceLogClient>
      implements Provider<com.masterlock.api.client.KMSDeviceLogClient> {
    private final ApiModule module;
    private Binding<retrofit.RestAdapter> restAdapter;

    public ProvideKMSDeviceLogClientProvidesAdapter(ApiModule module) {
      super("com.masterlock.api.client.KMSDeviceLogClient", IS_SINGLETON, "com.masterlock.api.module.ApiModule", "provideKMSDeviceLogClient");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      restAdapter = (Binding<retrofit.RestAdapter>) linker.requestBinding("retrofit.RestAdapter", ApiModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(restAdapter);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.masterlock.api.client.KMSDeviceLogClient>}.
     */
    @Override
    public com.masterlock.api.client.KMSDeviceLogClient get() {
      return module.provideKMSDeviceLogClient(restAdapter.get());
    }
  }

  /**
   * A {@code Binding<com.masterlock.api.client.GuestClient>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code com.masterlock.api.client.GuestClient} and its
   * dependencies.
   *
   * Being a {@code Provider<com.masterlock.api.client.GuestClient>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvidesGuestClientProvidesAdapter extends ProvidesBinding<com.masterlock.api.client.GuestClient>
      implements Provider<com.masterlock.api.client.GuestClient> {
    private final ApiModule module;
    private Binding<retrofit.RestAdapter> restAdapter;

    public ProvidesGuestClientProvidesAdapter(ApiModule module) {
      super("com.masterlock.api.client.GuestClient", IS_SINGLETON, "com.masterlock.api.module.ApiModule", "providesGuestClient");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      restAdapter = (Binding<retrofit.RestAdapter>) linker.requestBinding("retrofit.RestAdapter", ApiModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(restAdapter);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.masterlock.api.client.GuestClient>}.
     */
    @Override
    public com.masterlock.api.client.GuestClient get() {
      return module.providesGuestClient(restAdapter.get());
    }
  }

  /**
   * A {@code Binding<com.masterlock.api.client.ProductInvitationClient>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code com.masterlock.api.client.ProductInvitationClient} and its
   * dependencies.
   *
   * Being a {@code Provider<com.masterlock.api.client.ProductInvitationClient>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvidesProductInvitationClientProvidesAdapter extends ProvidesBinding<com.masterlock.api.client.ProductInvitationClient>
      implements Provider<com.masterlock.api.client.ProductInvitationClient> {
    private final ApiModule module;
    private Binding<retrofit.RestAdapter> restAdapter;

    public ProvidesProductInvitationClientProvidesAdapter(ApiModule module) {
      super("com.masterlock.api.client.ProductInvitationClient", IS_SINGLETON, "com.masterlock.api.module.ApiModule", "providesProductInvitationClient");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      restAdapter = (Binding<retrofit.RestAdapter>) linker.requestBinding("retrofit.RestAdapter", ApiModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(restAdapter);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.masterlock.api.client.ProductInvitationClient>}.
     */
    @Override
    public com.masterlock.api.client.ProductInvitationClient get() {
      return module.providesProductInvitationClient(restAdapter.get());
    }
  }

  /**
   * A {@code Binding<com.masterlock.api.util.ApiErrorHandler>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code com.masterlock.api.util.ApiErrorHandler} and its
   * dependencies.
   *
   * Being a {@code Provider<com.masterlock.api.util.ApiErrorHandler>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvidesApiErrorHandlerProvidesAdapter extends ProvidesBinding<com.masterlock.api.util.ApiErrorHandler>
      implements Provider<com.masterlock.api.util.ApiErrorHandler> {
    private final ApiModule module;
    private Binding<com.masterlock.api.util.IResourceWrapper> resourceWrapper;

    public ProvidesApiErrorHandlerProvidesAdapter(ApiModule module) {
      super("com.masterlock.api.util.ApiErrorHandler", IS_SINGLETON, "com.masterlock.api.module.ApiModule", "providesApiErrorHandler");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      resourceWrapper = (Binding<com.masterlock.api.util.IResourceWrapper>) linker.requestBinding("com.masterlock.api.util.IResourceWrapper", ApiModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(resourceWrapper);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.masterlock.api.util.ApiErrorHandler>}.
     */
    @Override
    public com.masterlock.api.util.ApiErrorHandler get() {
      return module.providesApiErrorHandler(resourceWrapper.get());
    }
  }

  /**
   * A {@code Binding<com.masterlock.api.client.TimezoneClient>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code com.masterlock.api.client.TimezoneClient} and its
   * dependencies.
   *
   * Being a {@code Provider<com.masterlock.api.client.TimezoneClient>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideTimezoneClientProvidesAdapter extends ProvidesBinding<com.masterlock.api.client.TimezoneClient>
      implements Provider<com.masterlock.api.client.TimezoneClient> {
    private final ApiModule module;
    private Binding<retrofit.RestAdapter> restAdapter;

    public ProvideTimezoneClientProvidesAdapter(ApiModule module) {
      super("com.masterlock.api.client.TimezoneClient", IS_SINGLETON, "com.masterlock.api.module.ApiModule", "provideTimezoneClient");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      restAdapter = (Binding<retrofit.RestAdapter>) linker.requestBinding("retrofit.RestAdapter", ApiModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(restAdapter);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.masterlock.api.client.TimezoneClient>}.
     */
    @Override
    public com.masterlock.api.client.TimezoneClient get() {
      return module.provideTimezoneClient(restAdapter.get());
    }
  }
}
